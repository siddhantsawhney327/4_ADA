#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct {
    int *stack1;
    int *stack2;
    int top1;
    int top2;
    int capacity;
} MyQueue;

// Initialize the queue
MyQueue* myQueueCreate() {
    MyQueue* queue = (MyQueue*)malloc(sizeof(MyQueue));
    queue->capacity = 100;  // Set a reasonable capacity
    queue->stack1 = (int*)malloc(queue->capacity * sizeof(int));
    queue->stack2 = (int*)malloc(queue->capacity * sizeof(int));
    queue->top1 = 0;
    queue->top2 = 0;
    return queue;
}

// Push an element to the queue
void myQueuePush(MyQueue* obj, int x) {
    obj->stack1[obj->top1++] = x;
}

// Pop an element from the queue
int myQueuePop(MyQueue* obj) {
    if (obj->top2 == 0) {
        // Transfer elements from stack1 to stack2, reversing their order
        while (obj->top1 > 0) {
            obj->stack2[obj->top2++] = obj->stack1[--obj->top1];
        }
    }
    return obj->stack2[--obj->top2];
}

// Get the front element of the queue
int myQueuePeek(MyQueue* obj) {
    if (obj->top2 == 0) {
        // Transfer elements from stack1 to stack2, reversing their order
        while (obj->top1 > 0) {
            obj->stack2[obj->top2++] = obj->stack1[--obj->top1];
        }
    }
    return obj->stack2[obj->top2 - 1];
}

// Check if the queue is empty
bool myQueueEmpty(MyQueue* obj) {
    return obj->top1 == 0 && obj->top2 == 0;
}

// Free the queue memory
void myQueueFree(MyQueue* obj) {
    free(obj->stack1);
    free(obj->stack2);
    free(obj);
}
